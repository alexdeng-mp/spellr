#!/usr/bin/env ruby
# frozen_string_literal: true

require 'net/http'
require 'fileutils'
require_relative 'util/write'
require_relative 'util/fetch'

module SCOWLDownloader
  module_function

  extend Write
  extend Fetch

  LOCALES = %i{US AU CA GBs GBz}.freeze
  BASE_WORDLIST_PATH = OUTPUT_DIR.join('english.txt')
  DEFAULT_PARAMS = {
    max_size: 80,
    spelling: LOCALES.first,
    max_variant: 0,
    diacritic: :both,
    hacker: true,
    download: :wordlist,
    encoding: :'utf-8',
    format: :inline
  }.freeze

  def download
    fetch_all
    prepare_common_wordlist
    remove_common_words_from_locales
    generate_gb
    copy_base_license
  end

  def wordlist_path(locale = nil, suffix = '')
    if locale
      OUTPUT_DIR.join('english', "#{locale}#{suffix}.txt")
    else
      OUTPUT_DIR.join("english#{suffix}.txt")
    end
  end

  def license_path(locale)
    wordlist_path(locale, '.LICENSE')
  end

  def fetch_all
    LOCALES.each { |locale| fetch(locale) }
  end

  def fetch(locale)
    puts "fetching #{locale}"
    words = Net::HTTP.get_response(uri(locale)).body
    words = extract_and_write_license(words, locale)
    write_wordlist(words, "english/#{locale}")
  end

  def uri(spelling = :US)
    query = URI.encode_www_form(**DEFAULT_PARAMS, spelling: spelling)
    URI.parse("http://app.aspell.net/create?#{query}")
  end

  def extract_and_write_license(words, locale)
    puts "writing #{locale} license"
    words, license = words.split('---', 2).reverse

    license_path(locale).write(license) if license

    words
  end

  def prepare_common_wordlist
    puts 'prepare common english wordlist'
    keep_common(wordlist_path(LOCALES[0]), wordlist_path(LOCALES[1]), wordlist_path)
    LOCALES.drop(2).each { |locale| keep_common(wordlist_path(locale), wordlist_path) }
  end

  def remove_common_words_from_locales
    LOCALES.each do |locale|
      puts "remove common words from #{locale}"
      keep_right_only(wordlist_path, wordlist_path(locale))
    end
  end

  def keep_common(path1, path2, output = path2)
    system("comm -12 #{path1} #{path2} > #{output}.tmp")
    output.sub_ext('.txt.tmp').rename(output)
  end

  def keep_right_only(path1, path2, output = path2)
    system("comm -13 #{path1} #{path2} > #{output}.tmp")
    output.sub_ext('.txt.tmp').rename(output)
  end

  def generate_gb
    write_wordlist(wordlist_path(:GBs).read + wordlist_path(:GBz).read, :GB)
  end

  def copy_base_license
    FileUtils.copy(license_path(:US), license_path)
  end
end

SCOWLDownloader.download
