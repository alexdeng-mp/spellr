#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative 'util/write'
require 'set'

# TODO: kwargs. look at .parameters

class RubyWords
  include Write

  KEYWORDS = %w{
    __ENCODING__ __LINE__ __FILE__ BEGIN END alias and begin break case class def
    defined? do else elsif end ensure false for if in module next nil not or redo
    rescue retry return self super then true undef unless until when while yield
  }.freeze

  CONVENTION_WORDS = %w{
    klass kwarg kwargs
  }.freeze

  STDLIBS = %w{
    abbrev base64 benchmark bigdecimal cgi cmath coverage csv date delegate digest
    drb/drb e2mmap English erb etc expect fcntl fiddle fileutils find forwardable
    getoptlong io/console io/nonblock io/wait ipaddr irb json logger matrix mkmf
    monitor mutex_m net/ftp net/http net/imap net/pop net/smtp net/telnet nkf
    objspace observer open-uri open3 openssl optionparser optparse ostruct pathname
    pp prettyprint prime pstore psych pty racc/parser readline resolv ripper rss scanf
    sdbm securerandom set shell shellwords singleton socket stringio strscan sync syslog
    tempfile thwait time timeout tmpdir tracer tsort uri weakref webrick yaml zlib
  }.freeze

  def initialize
    @strings = []
    looked_at(RubyWords, Write)
    require_stdlibs
    collect_words
    write_wordlist(@strings.to_a.join("\n"), :ruby)
  end

  private

  def collect_words
    $VERBOSE = nil
    check_and_collect_words_for(Module)
    add_words STDLIBS
    add_words KEYWORDS
    add_words CONVENTION_WORDS
  end

  def check_and_collect_words_for(constant)
    return if looked_at?(constant) # to prevent endless loops

    puts "generating words for #{constant}" if constant.is_a?(Module)

    looked_at(constant)

    collect_words_for(constant)
  end

  def collect_words_for(constant)
    collect_instance_methods_for(constant)
    collect_singleton_methods_for(constant)
    collect_constants_for(constant)
  end

  def collect_instance_methods_for(constant)
    return unless constant.respond_to?(:public_instance_methods)

    add_words constant.public_instance_methods(false)
  end

  def collect_singleton_methods_for(constant)
    return unless constant.respond_to?(:public_methods)

    add_words constant.public_methods(false)
  end

  def collect_constants_for(constant) # rubocop:disable Metrics/MethodLength
    return unless constant.respond_to?(:constants)

    constant.constants.each do |child|
      add_words(child)
      check_and_collect_words_for(constant.const_get(child))
    rescue StandardError, LoadError => e
      warn "Error loading #{constant}::#{child} => #{e.message}"
    end
  end

  def looked_at(*constants)
    @looked_at ||= Set.new
    @looked_at += constants.map(&:__id__)
  end

  def looked_at?(constant)
    @looked_at ||= Set.new
    @looked_at.include?(constant.__id__)
  end

  def add_words(words)
    @strings ||= Set.new
    @strings += Array(words).map { |x| x.to_s.encode('UTF-8') }
  end

  def require_stdlibs
    STDLIBS.each { |p| require p }
  end
end

RubyWords.new
